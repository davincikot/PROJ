# Импортируем из модуля "os" инструменты для работы с путями в файловой системе.
from os import listdir, getcwd, path

# Определяем функцию. Это потребуется для возможности вызова алгоритма первого модуля из цикла 'while' второго модуля.
def search_text():
    # Получаем от пользователя путь к каталогу и удаляем лишние пробелы.
    print()
    dir1 = input("Введите путь каталога с файлом, либо нажмите ENTER для поиска файла в текущем каталоге: ").strip()
    print()
    # Если путь не указан или не существует, используем текущий каталог.
    if dir1 == "" or not path.isdir(dir1):
        dir1 = getcwd()
        print("Каталог не указан, либо не существует. Поиск файла будет выполнен в текущем каталоге.","\n")
    # Получаем от пользователя имя файла и удаляем лишние пробелы.
    print("\n".join(listdir(dir1)),"\n")
    file1 = input("Введите или скопируйте имя файла с расширением из указанного каталога: ").strip()
    # Проверяем наличие файла в указанном каталоге и корректность ввода его имени.
    while file1 == "" or file1 not in listdir(dir1):
        print("\n","Файл не существует, либо не указан.","\n", sep="")
        file1 = input("Введите или скопируйте имя файла с расширением из указанного каталога: ").strip()
    # Создаем полный путь к файлу для чтения, корректно обрабатывая разделители пути.
    input_file_path = path.join(dir1, file1)

    try:
        # Открываем целевой файл для чтения.
        with open(input_file_path, "r", encoding="UTF-8") as file_r:
            # Считываем все строки из файла.
            lines = file_r.readlines()
    # Обрабатываем возможные ошибки.
    except Exception as e:
        print(f"Непредвиденная ошибка: {e}. Обратитесь к разработчику.")

    # Определяем счетчики для каждого искомого вхождения.
    c_NEC, c_SHARP, c_SONY = 0, 0, 0

    # Cчитаем искомые вхождения в каждой строке.
    for line in lines:
        if 'NEC' in line:
            c_NEC += 1
        if 'SHARP' in line:
            c_SHARP += 1
        if 'SONY' in line:
            c_SONY += 1

    # Выводим результаты подсчета в консоль.
    print(f"\nNEC: {c_NEC}\nSHARP: {c_SHARP}\nSONY: {c_SONY}\n")

    # Предлагаем пользователю сохранить результаты в файл.
    save_result = input("Чтобы сохранить результаты введите 'да' без кавычек. Чтобы продолжить, введите любые символы, либо нажмите ENTER: ").strip()
    if save_result.lower() == "да":
        # Получаем от пользователя путь для сохранения файла и удаляем лишние пробелы.
        print()
        dir2 = input("Введите путь каталога для записи файла, либо нажмите ENTER для выбора текущего каталога: ").strip()
        print()
        # Если путь не указан или не существует, используем текущий каталог.
        if dir2 == "" or not path.isdir(dir2):
            dir2 = getcwd()
            print("Каталог не указан, либо не существует. Файл будет сохранен в текущем каталоге.")
        # Получаем от пользователя имя файла и удаляем лишние пробелы.
        print()
        file2 = input("Введите имя файла для сохранения в нем результатов поиска: ").strip()
        # Предлагаем пользователю ввести корректное имя файла и проверяем.
        while file2 == "":
            print("\n","Ошибка. Имя файла не может быть пустым. Пожалуйста, введите корректное имя файла.","\n",sep="")
            file2 = input("Введите имя файла для сохранения в нем результатов поиска: ").strip()
        # Создаем полный путь к файлу для сохранения, корректно обрабатывая разделители пути.
        output_file_path = path.join(dir2, file2)
        # Запускаем цикл проверки существования файла и корректности его имени.
        while True:
            if path.exists(output_file_path):
                print("\n","Файл существует.","\n", sep="")
                # Предлаагаем пользователю перезаписать существующий файл.
                overwrite = input(f"Для перезаписи файла '{file2}' введите 'да' без кавычек. Для выбора другого имени файла введите любые символы, либо нажмите ENTER: ").strip()
                if overwrite.lower() == "да":
                    break
                else:
                    # Предлагаем пользователю ввести корректное имя файла и проверяем.
                    file2 = input("Введите имя файла для сохранения в нем результатов поиска: ").strip()
                    while file2 == "":
                        print("\n","Ошибка. Имя файла не может быть пустым. Пожалуйста, введите корректное имя файла.","\n",sep="")
                        file2 = input("Введите имя файла для сохранения в нем результатов поиска: ").strip()
            else:
                break
        
        try:
            # Сохраняем результаты поиска в файл.
            with open(output_file_path, "w", encoding="UTF-8") as file_w:
                file_w.write(f"NEC: {c_NEC}\nSHARP: {c_SHARP}\nSONY: {c_SONY}")
            print(f"Поиск завершен. Данные успешно сохранены в файле '{file_w.name}'.")
        # Обрабатываем возможные ошибки.
        except Exception as e:
            print(f"Непредвиденная ошибка: {e}. Обратитесь к разработчику.")
    
    else:
        print("\n","Поиск завершен.",sep="")

# Запускаем цикл для реализации возможности повторного поиска.
while True:
    search_text()
    print()
    # Предлагаем пользователю выполнить поиск в другом файле.
    continue_search = input("Чтобы продолжить поиск в другом файле введите 'да' без кавычек. Для завершения поиска введите любые символы, либо нажмите ENTER: ").strip()
    if continue_search.lower() == "да":
        continue
    else:
        print("\n", "Спасибо, что выбрали наш сервис.", "\n", sep="")
        break
